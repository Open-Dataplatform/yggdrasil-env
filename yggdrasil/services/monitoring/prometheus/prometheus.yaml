standalonePushgateway:
  enabled: true

prometheus-pushgateway:

  image:
    repository: weaveworks/prom-aggregation-gateway
    tag: master-c4415bbe
    pullPolicy: IfNotPresent

  extraArgs: ["-listen", ":9091"]

  # nodeSelector:
  #   agentpool: monitoring

prometheus:
  serviceAccounts:
    pushgateway:
      create: false

  pushgateway:
    enabled: false

  server:
    ingress:
      enabled: false
    # nodeSelector:
    #   agentpool: monitoring

    extraFlags:
    - web.enable-lifecycle
    - storage.tsdb.max-block-duration=2h
    - storage.tsdb.min-block-duration=2h

    retention: "1d"

    extraVolumes:
    - name: prometheus-bucket
      secret:
        secretName: prometheus-bucket

    sidecarContainers:
      - name: thanos-sidecar
        image: thanosio/thanos:main-2021-06-04-ef94b7e6
        ports:
        - name: http
          containerPort: 10902
        - name: grpc
          containerPort: 10901
        args:
          - "sidecar"
          - "--debug.name=sidecar"
          - "--log.level=debug"
          - "--grpc-address=0.0.0.0:10901"
          - "--grpc-grace-period=1s"
          - "--http-address=0.0.0.0:10902"
          - "--http-grace-period=1s"
          - "--prometheus.url=http://localhost:9090/"
          - "--tsdb.path=/data"
          - "--objstore.config-file=/etc/objectStorage/object-store.yaml"
        volumeMounts:
          - name: config-volume
            mountPath: /etc/config
            readOnly: true
          - name: storage-volume
            mountPath: /data
          - name: prometheus-bucket
            mountPath: /etc/objectStorage
            readOnly: true

    global:

      external_labels:
        prometheus: Prometheus

  alertmanager:
    # nodeSelector:
    #   agentpool: monitoring
    ingress:
      enabled: false

    baseURL: "https://{{ .Values.ingress.host }}/alertmanager"
    prefixURL: "/alertmanager"

    extraFlags:
    - web.route-prefix=/alertmanager

  # nodeExporter:
    # nodeSelector:
    #   agentpool: monitoring

janus:
  enabled: true
  host: {{ .Values.ingress.hosts.main.host | quote }}
  certmanagerIssuer:
    name: {{ .Values.ingress.certmanagerissuer | quote }}
    kind: ClusterIssuer

  ingressRoutes:
    - name: prometheus
      entryPoints:
        - websecure
      routes:
      - kind: Rule
        # Without host
        match: PathPrefix(`/alertmanager`)
        services:
          - name: prometheus-alertmanager
            port: 80
        middlewares:
          - name: auth
            namespace: networking
      certificate:
        enabled: true

lethe:
  enabled: true
  secretStores:
    - name: vault-backend
      providers:
        vault:
          server: "{{ .Values.vaultServer }}"
          path: "k8s"
          version: "v2"
          auth:
            # Authenticate against Vault using a Kubernetes ServiceAccount
            # token stored in a Secret.
            # https://www.vaultproject.io/docs/auth/kubernetes
            kubernetes:
              # Path where the Kubernetes authentication backend is mounted in Vault
              mountPath: "{{ template "helper.name" (dict "context" . "name" "kubernetes") }}"
              # A required field containing the Vault Role to assume.
              role: "k8s-secrets"
  secrets:
    - name: prometheus-bucket
      secretStore:
        backend: vault-backend
        kind: SecretStore
      target:
        name: prometheus-bucket
        template:
          data:
            object-store.yaml: |
              type: AZURE
              config:
                storage_account: "{{`{{ .saName | toString }}`}}"
                storage_account_key: "{{`{{ .saKey | toString }}`}}"
                container: "thanos"
                endpoint: ""
                max_retries: 3
      data:
        - secretKey: saName
          remoteRef:
            key: secrets/sa-metrics
            property: sa-name
        - secretKey: saKey
          remoteRef:
            key: secrets/sa-metrics
            property: sa-key