argo-workflows:
  server:
    baseHref: /argowf/
    sso:
      issuer: https://login.microsoftonline.com/f7619355-6c67-4100-9a78-1847f30742e2/v2.0
      redirectUrl: https://{{ .Values.ingress.hosts.main.host }}/argowf/oauth2/callback
  controller:
    workflowNamespaces:
      - tooling

janus:
  enabled: true
  host: {{ .Values.ingress.hosts.main.host | quote }}
  certmanagerIssuer:
    name: {{ .Values.ingress.certmanagerissuer | quote }}
    kind: ClusterIssuer

  ingressRoutes:
    - name: argo-workflows
      entryPoints:
        - websecure
      routes:
        - kind: Rule
          match: PathPrefix(`/argowf`)
          services:
            - name: argo-workflows-{{ .Values.nameSuffix }}-server
              port: 2746
          middlewares:
            - name: argo-stripprefix
      certificate:
        enabled: true

  middlewares:
    - name: argo-stripprefix
      spec:
        stripPrefix:
          prefixes:
            - /argowf

lethe:
  enabled: true
  secretStores:
    - name: k8s-secret-backend
      providers:
        vault:
          server: "{{ .Values.vaultServer }}"
          path: "k8s"
          version: "v2"
          auth:
            # Authenticate against Vault using a Kubernetes ServiceAccount
            # token stored in a Secret.
            # https://www.vaultproject.io/docs/auth/kubernetes
            kubernetes:
              # Path where the Kubernetes authentication backend is mounted in Vault
              mountPath: "{{ template "helper.name" (dict "context" . "name" "kubernetes") }}"
              # A required field containing the Vault Role to assume.
              role: "k8s-secrets"

  secrets:
    - name: minio-creds-secret
      secretStore:
        backend: k8s-secret-backend
        kind: SecretStore
      target:
        name: minio-creds-secret
      data:
        - secretKey: accesskey
          remoteRef:
            key: secrets/minio
            property: accesskey
        - secretKey: secretkey
          remoteRef:
            key: secrets/minio
            property: secretkey

    - name: argowf-sso
      secretStore:
        backend: k8s-secret-backend
        kind: SecretStore
      target:
        name: argowf-sso
      data:
        - secretKey: clientid
          remoteRef:
            key: secrets/sso
            property: clientid
        - secretKey: clientsecret
          remoteRef:
            key: secrets/sso
            property: clientsecret